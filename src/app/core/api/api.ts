/* tslint:disable */
/* eslint-disable */
/**
 * Food App API Documentation
 * API documentation for Food App
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@foodapp.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface Caa0baf44bc64c9b94a44e9ed5bc418d200ResponseInner
 */
export interface Caa0baf44bc64c9b94a44e9ed5bc418d200ResponseInner {
    /**
     *
     * @type {number}
     * @memberof Caa0baf44bc64c9b94a44e9ed5bc418d200ResponseInner
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Caa0baf44bc64c9b94a44e9ed5bc418d200ResponseInner
     */
    'question_text'?: string;
    /**
     *
     * @type {string}
     * @memberof Caa0baf44bc64c9b94a44e9ed5bc418d200ResponseInner
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Caa0baf44bc64c9b94a44e9ed5bc418d200ResponseInner
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface Fd2c54c83721116cef0ad4b94134932b200ResponseInner
 */
export interface Fd2c54c83721116cef0ad4b94134932b200ResponseInner {
    /**
     *
     * @type {number}
     * @memberof Fd2c54c83721116cef0ad4b94134932b200ResponseInner
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof Fd2c54c83721116cef0ad4b94134932b200ResponseInner
     */
    'question_id'?: number;
    /**
     *
     * @type {string}
     * @memberof Fd2c54c83721116cef0ad4b94134932b200ResponseInner
     */
    'answer_text'?: string;
    /**
     *
     * @type {number}
     * @memberof Fd2c54c83721116cef0ad4b94134932b200ResponseInner
     */
    'votes'?: number;
    /**
     *
     * @type {string}
     * @memberof Fd2c54c83721116cef0ad4b94134932b200ResponseInner
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Fd2c54c83721116cef0ad4b94134932b200ResponseInner
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface Model7270982c262ae0c4e547d5eec368e436200Response
 */
export interface Model7270982c262ae0c4e547d5eec368e436200Response {
    /**
     *
     * @type {string}
     * @memberof Model7270982c262ae0c4e547d5eec368e436200Response
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface Restaurant
 */
export interface Restaurant {
    /**
     * Restaurant ID
     * @type {number}
     * @memberof Restaurant
     */
    'id'?: number;
    /**
     * Restaurant name
     * @type {string}
     * @memberof Restaurant
     */
    'name': string;
    /**
     * Restaurant address
     * @type {string}
     * @memberof Restaurant
     */
    'address': string;
    /**
     * Restaurant city
     * @type {string}
     * @memberof Restaurant
     */
    'city': string;
    /**
     * Restaurant cuisine type
     * @type {string}
     * @memberof Restaurant
     */
    'cuisine': string;
    /**
     * Restaurant rating
     * @type {number}
     * @memberof Restaurant
     */
    'rating'?: number;
    /**
     * Restaurant website
     * @type {string}
     * @memberof Restaurant
     */
    'website'?: string;
    /**
     * Creation date
     * @type {string}
     * @memberof Restaurant
     */
    'created_at'?: string;
    /**
     * Last update date
     * @type {string}
     * @memberof Restaurant
     */
    'updated_at'?: string;
    'match_score'?: number;
}

/**
 * PollsApi - axios parameter creator
 * @export
 */
export const PollsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get list of questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caa0baf44bc64c9b94a44e9ed5bc418d: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get list of answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fd2c54c83721116cef0ad4b94134932b: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/answers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PollsApi - functional programming interface
 * @export
 */
export const PollsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PollsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Get list of questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caa0baf44bc64c9b94a44e9ed5bc418d(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Caa0baf44bc64c9b94a44e9ed5bc418d200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caa0baf44bc64c9b94a44e9ed5bc418d(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PollsApi.caa0baf44bc64c9b94a44e9ed5bc418d']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get list of answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fd2c54c83721116cef0ad4b94134932b(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Fd2c54c83721116cef0ad4b94134932b200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fd2c54c83721116cef0ad4b94134932b(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PollsApi.fd2c54c83721116cef0ad4b94134932b']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PollsApi - factory interface
 * @export
 */
export const PollsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PollsApiFp(configuration)
    return {
        /**
         *
         * @summary Get list of questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caa0baf44bc64c9b94a44e9ed5bc418d(options?: RawAxiosRequestConfig): AxiosPromise<Array<Caa0baf44bc64c9b94a44e9ed5bc418d200ResponseInner>> {
            return localVarFp.caa0baf44bc64c9b94a44e9ed5bc418d(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get list of answers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fd2c54c83721116cef0ad4b94134932b(options?: RawAxiosRequestConfig): AxiosPromise<Array<Fd2c54c83721116cef0ad4b94134932b200ResponseInner>> {
            return localVarFp.fd2c54c83721116cef0ad4b94134932b(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PollsApi - object-oriented interface
 * @export
 * @class PollsApi
 * @extends {BaseAPI}
 */
export class PollsApi extends BaseAPI {
    /**
     *
     * @summary Get list of questions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PollsApi
     */
    public caa0baf44bc64c9b94a44e9ed5bc418d(options?: RawAxiosRequestConfig) {
        return PollsApiFp(this.configuration).caa0baf44bc64c9b94a44e9ed5bc418d(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get list of answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PollsApi
     */
    public fd2c54c83721116cef0ad4b94134932b(options?: RawAxiosRequestConfig) {
        return PollsApiFp(this.configuration).fd2c54c83721116cef0ad4b94134932b(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RestaurantsApi - axios parameter creator
 * @export
 */
export const RestaurantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get list of restaurants
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0ef65917394f8eb77311d1d085ff31e4: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/restaurants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get restaurant by ID
         * @param {number} id Restaurant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _26e68feb8cf848945261ce292866ec2c: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_26e68feb8cf848945261ce292866ec2c', 'id', id)
            const localVarPath = `/api/restaurants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete restaurant by ID
         * @param {number} id Restaurant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _7270982c262ae0c4e547d5eec368e436: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_7270982c262ae0c4e547d5eec368e436', 'id', id)
            const localVarPath = `/api/restaurants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new restaurant
         * @param {Restaurant} restaurant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _938db3c3288b69d111a27774178532ab: async (restaurant: Restaurant, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restaurant' is not null or undefined
            assertParamExists('_938db3c3288b69d111a27774178532ab', 'restaurant', restaurant)
            const localVarPath = `/api/restaurants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restaurant, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update restaurant by ID
         * @param {number} id Restaurant ID
         * @param {Restaurant} restaurant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ab7fcec28e65e4b5fda3035e61228114: async (id: number, restaurant: Restaurant, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ab7fcec28e65e4b5fda3035e61228114', 'id', id)
            // verify required parameter 'restaurant' is not null or undefined
            assertParamExists('ab7fcec28e65e4b5fda3035e61228114', 'restaurant', restaurant)
            const localVarPath = `/api/restaurants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restaurant, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantsApi - functional programming interface
 * @export
 */
export const RestaurantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestaurantsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Get list of restaurants
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _0ef65917394f8eb77311d1d085ff31e4(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Restaurant>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._0ef65917394f8eb77311d1d085ff31e4(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RestaurantsApi._0ef65917394f8eb77311d1d085ff31e4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get restaurant by ID
         * @param {number} id Restaurant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _26e68feb8cf848945261ce292866ec2c(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Restaurant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._26e68feb8cf848945261ce292866ec2c(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RestaurantsApi._26e68feb8cf848945261ce292866ec2c']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Delete restaurant by ID
         * @param {number} id Restaurant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _7270982c262ae0c4e547d5eec368e436(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model7270982c262ae0c4e547d5eec368e436200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._7270982c262ae0c4e547d5eec368e436(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RestaurantsApi._7270982c262ae0c4e547d5eec368e436']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Create a new restaurant
         * @param {Restaurant} restaurant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _938db3c3288b69d111a27774178532ab(restaurant: Restaurant, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Restaurant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._938db3c3288b69d111a27774178532ab(restaurant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RestaurantsApi._938db3c3288b69d111a27774178532ab']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update restaurant by ID
         * @param {number} id Restaurant ID
         * @param {Restaurant} restaurant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ab7fcec28e65e4b5fda3035e61228114(id: number, restaurant: Restaurant, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Restaurant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ab7fcec28e65e4b5fda3035e61228114(id, restaurant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RestaurantsApi.ab7fcec28e65e4b5fda3035e61228114']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RestaurantsApi - factory interface
 * @export
 */
export const RestaurantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestaurantsApiFp(configuration)
    return {
        /**
         *
         * @summary Get list of restaurants
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0ef65917394f8eb77311d1d085ff31e4(options?: RawAxiosRequestConfig): AxiosPromise<Array<Restaurant>> {
            return localVarFp._0ef65917394f8eb77311d1d085ff31e4(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get restaurant by ID
         * @param {number} id Restaurant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _26e68feb8cf848945261ce292866ec2c(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Restaurant> {
            return localVarFp._26e68feb8cf848945261ce292866ec2c(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete restaurant by ID
         * @param {number} id Restaurant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _7270982c262ae0c4e547d5eec368e436(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Model7270982c262ae0c4e547d5eec368e436200Response> {
            return localVarFp._7270982c262ae0c4e547d5eec368e436(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new restaurant
         * @param {Restaurant} restaurant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _938db3c3288b69d111a27774178532ab(restaurant: Restaurant, options?: RawAxiosRequestConfig): AxiosPromise<Restaurant> {
            return localVarFp._938db3c3288b69d111a27774178532ab(restaurant, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update restaurant by ID
         * @param {number} id Restaurant ID
         * @param {Restaurant} restaurant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ab7fcec28e65e4b5fda3035e61228114(id: number, restaurant: Restaurant, options?: RawAxiosRequestConfig): AxiosPromise<Restaurant> {
            return localVarFp.ab7fcec28e65e4b5fda3035e61228114(id, restaurant, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RestaurantsApi - object-oriented interface
 * @export
 * @class RestaurantsApi
 * @extends {BaseAPI}
 */
export class RestaurantsApi extends BaseAPI {
    /**
     *
     * @summary Get list of restaurants
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public _0ef65917394f8eb77311d1d085ff31e4(options?: RawAxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration)._0ef65917394f8eb77311d1d085ff31e4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get restaurant by ID
     * @param {number} id Restaurant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public _26e68feb8cf848945261ce292866ec2c(id: number, options?: RawAxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration)._26e68feb8cf848945261ce292866ec2c(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete restaurant by ID
     * @param {number} id Restaurant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public _7270982c262ae0c4e547d5eec368e436(id: number, options?: RawAxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration)._7270982c262ae0c4e547d5eec368e436(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a new restaurant
     * @param {Restaurant} restaurant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public _938db3c3288b69d111a27774178532ab(restaurant: Restaurant, options?: RawAxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration)._938db3c3288b69d111a27774178532ab(restaurant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update restaurant by ID
     * @param {number} id Restaurant ID
     * @param {Restaurant} restaurant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantsApi
     */
    public ab7fcec28e65e4b5fda3035e61228114(id: number, restaurant: Restaurant, options?: RawAxiosRequestConfig) {
        return RestaurantsApiFp(this.configuration).ab7fcec28e65e4b5fda3035e61228114(id, restaurant, options).then((request) => request(this.axios, this.basePath));
    }
}



